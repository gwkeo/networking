from telebot.util import quick_markup
from enum import Enum, auto
from telebot import types


class CallbackTypes(Enum):
    register = "REGISTER"
    leave_session = "LEAVESESSION"
    accept_new_user = "ACCEPTNEWUSER"
    deny_new_user = "DENYNEWUSER"
    user_ready = "USERREADY"
    admin_round_start = "ADMIN_ROUND_START"

class AdminButtons(Enum):
    show_settings = "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"
    change_settings = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚úèÔ∏è"
    start_session = "–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é üö¶"
    next_round = "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ ‚è≠Ô∏è"
    show_users = "–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•"
    ideal_parameters = "–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üí°"
    finish_session = "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é üõë"

    @classmethod
    def to_array(cls):
        return [member.value for member in cls]

register_markup = quick_markup({
    '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è': {'callback_data': CallbackTypes.register.value}
}, row_width=2)


leave_session = quick_markup({
    '–í—ã–π—Ç–∏': {'callback_data': CallbackTypes.leave_session.value}
}, row_width=2)


def request_actions(id: int):
    return quick_markup({
        '–ü—Ä–∏–Ω—è—Ç—å': {
            'callback_data': f"{CallbackTypes.accept_new_user.value}:{id}"
        },
        '–û—Ç–∫–ª–æ–Ω–∏—Ç—å': {
            'callback_data': f"{CallbackTypes.deny_new_user.value}:{id}"
        }
    }, row_width=2)


user_ready = quick_markup({
    '–ì–æ—Ç–æ–≤': {
        'callback_data': f"{CallbackTypes.user_ready.value}"
    },
    '–í—ã–π—Ç–∏': {
        'callback_data': f"{CallbackTypes.leave_session.value}"
    }
}, row_width=2)


admin_main = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
admin_main.add(
    types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è'),
    types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚úèÔ∏è'),
    types.KeyboardButton('–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é üö¶'),
    types.KeyboardButton('–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ ‚è≠Ô∏è'),
    types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•'),
    types.KeyboardButton('–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üí°'),
    types.KeyboardButton('–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é üõë')
)

start_session = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
start_session.add(types.KeyboardButton('–°—Ç–∞—Ä—Ç'))

start_session_inline = quick_markup({
    '–°—Ç–∞—Ä—Ç': {'callback_data': CallbackTypes.admin_round_start.value}
}, row_width=1)

start_session_before_everyone_ready = quick_markup({
    '–°—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É': {'callback_data': CallbackTypes.admin_round_start.value}
}, row_width=1)

if __name__ == "__main__":
    a = AdminButtons.to_array()
    print(a)