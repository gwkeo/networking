from typing import Dict
import telebot
from telebot import types
import json
import bin.texts as texts, bin.markups as markups
import bin.session as session
from bin import models
from enum import Enum
from bin.service import AppService
import math



config_file = open('config.json', 'r')
config = json.loads(config_file.read())
config_file.close()


class State(Enum):
    default = ""
    change_tables_count = "CHANGETABLESCOUNT"
    change_seats_count = "CHANGESEATSCOUNT"
    change_round_time = "CHANGEROUNDTIME"
    waiting_for_name = "WAITINGFORNAME"


class AppContext:
    def __init__(self, config):
        self.users = []
        self.usernames = dict()
        self.last_users = []
        self.admin_chat_id = config['telegram']['admin_chat_id']
        self.session_started = False
        self.settings = models.Settings(5, 4, 10)
        self.state = State.default
        self.scheduler = session.SessionScheduler(self.users, 1, 1)
        self.bots_count = 0
        self.app_service = AppService()



bot = telebot.TeleBot(token=config['telegram']['api_token'])
bot.context = AppContext(config)


@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    ctx : AppContext = bot.context
    if message.chat.id == ctx.admin_chat_id:
        bot.send_message(chat_id=ctx.admin_chat_id, text=texts.welcome_admin(message.chat.first_name), reply_markup=markups.admin_main)
        return
    bot.send_message(chat_id=message.chat.id, text=texts.start, reply_markup=markups.register_markup)


@bot.message_handler(commands=['showsettings'])
def handle_show_settings(message: types.Message):
    ctx = bot.context
    if message.chat.id != ctx.admin_chat_id:
        return
    bot.send_message(chat_id=message.chat.id, text=texts.current_settings(settings=ctx.settings))


@bot.message_handler(commands=['changesettings'])
def handle_change_settings(message: types.Message):
    ctx = bot.context
    if message.chat.id != ctx.admin_chat_id:
        return
    bot.send_message(chat_id=message.chat.id, text=texts.change_tables_count)
    ctx.state = State.change_tables_count.value


@bot.message_handler(commands=['addparticipant'])
def handle_add_participant(message: types.Message):
    ctx = bot.context
    if message.chat.id != ctx.admin_chat_id:
        return
    
    ctx.users.append(str(ctx.bots_count))
    ctx.bots_count += 1

    bot.send_message(
        chat_id=message.chat.id,
        text=f"–£—á–∞—Å—Ç–Ω–∏–∫ {ctx.users[-1]} –¥–æ–±–∞–≤–ª–µ–Ω"
    )

@bot.message_handler(commands=['removeparticipant'])
def handle_remove_participant(message: types.Message):
    ctx = bot.context
    if message.chat.id != ctx.admin_chat_id:
        return
    
    
    if ctx.users:
        removed_user = ctx.users.pop()
        ctx.scheduler.remove_participant(removed_user)
        bot.send_message(
            chat_id=message.chat.id,
            text=f"–£—á–∞—Å—Ç–Ω–∏–∫ {removed_user} —É–¥–∞–ª–µ–Ω"
        )

@bot.message_handler(func=lambda m: m.chat.id == bot.context.admin_chat_id and m.text in [
    '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è',
    '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚úèÔ∏è',
    '–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é üö¶',
    '–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ ‚è≠Ô∏è',
    '–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•',
    '–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üí°',
    '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é üõë'
])
def handle_admin_buttons(message: types.Message):
    ctx : AppContext = bot.context
    def get_ideal_tables_and_seats(n):
        best_tables = 1
        best_seats = n
        min_diff = n
        for tables in range(1, n+1):
            if n % tables == 0:
                seats = n // tables
                diff = abs(seats - tables)
                if diff < min_diff:
                    min_diff = diff
                    best_tables = tables
                    best_seats = seats
        return best_tables, best_seats
    count = len(ctx.users)
    tables, seats = get_ideal_tables_and_seats(count) if count > 0 else (0, 0)
    rounds = math.ceil((count-1) / (seats-1)) if count > 1 and seats > 1 else 1
    if message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        bot.send_message(message.chat.id, texts.current_settings(settings=ctx.settings), reply_markup=markups.admin_main)
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚úèÔ∏è':
        bot.send_message(message.chat.id, texts.change_tables_count, reply_markup=None)
        bot.send_message(
            message.chat.id,
            f"–ò–¥–µ–∞–ª—å–Ω–æ: {tables} —Å—Ç–æ–ª(–∞/–æ–≤) –ø–æ {seats} –º–µ—Å—Ç\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–∞—Ä: {rounds}",
            reply_markup=None
        )
        ctx.state = State.change_tables_count.value
    elif message.text == '–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é üö¶':
        ctx.session_started = False  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Ä–∞—É–Ω–¥–æ–º
        ctx.scheduler = session.SessionScheduler(
            participants=ctx.users,
            n=ctx.settings.tables_count,
            m=ctx.settings.seats_count
        )
        round_dict = ctx.scheduler.generate_next_round()
        if round_dict is None:
            bot.send_message(message.chat.id, texts.unable_to_start_session, reply_markup=markups.admin_main)
            return
        if not hasattr(ctx, 'user_table_msgs'):
            ctx.user_table_msgs = {}
        round_num = len(ctx.scheduler.rounds) + 1

        for participant, table in round_dict.items():
            ctx.usernames[participant].table = table + 1
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id
            pid = str(participant)
            if pid in ctx.user_table_msgs:
                try:
                    bot.edit_message_text(
                        chat_id=int(participant),
                        message_id=ctx.user_table_msgs[pid],
                        text=texts.show_users_current_table_num(table_num=table + 1, round_num=round_num),
                        reply_markup=markups.user_ready
                    )
                except Exception:
                    msg = bot.send_message(
                        chat_id=int(participant),
                        text=texts.show_users_current_table_num(table_num=table, round_num=round_num),
                        reply_markup=markups.user_ready
                    )
                    ctx.user_table_msgs[pid] = msg.message_id
            else:
                msg = bot.send_message(
                    chat_id=int(participant),
                    text=texts.show_users_current_table_num(table_num=table, round_num=round_num),
                    reply_markup=markups.user_ready
                )
                ctx.user_table_msgs[pid] = msg.message_id
        ctx.last_users = ctx.users.copy()
        ctx.ready_users = set()
        msg = bot.send_message(
            message.chat.id,
            f"–ì–æ—Ç–æ–≤—ã: 0 –∏–∑ {len(ctx.users)}",
            reply_markup=None
        )
        ctx.ready_counter_msg_id = msg.message_id
        stats = ctx.scheduler.get_session_stats()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏
        ctx.app_service.send_metrics(stats, ctx.settings)
    elif message.text == '–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ ‚è≠Ô∏è':
        round_dict = ctx.scheduler.generate_next_round()
        if round_dict is None:
            bot.send_message(message.chat.id, texts.unable_to_start_session, reply_markup=markups.admin_main)
            return
        if not hasattr(ctx, 'user_table_msgs'):
            ctx.user_table_msgs = {}
        round_num = len(ctx.scheduler.rounds) + 1
        for participant, table in round_dict.items():
            pid = str(participant)
            if pid in ctx.user_table_msgs:
                try:
                    bot.edit_message_text(
                        chat_id=int(participant),
                        message_id=ctx.user_table_msgs[pid],
                        text=texts.show_users_current_table_num(table_num=table, round_num=round_num),
                        reply_markup=markups.user_ready
                    )
                except Exception:
                    msg = bot.send_message(
                        chat_id=int(participant),
                        text=texts.show_users_current_table_num(table_num=table, round_num=round_num),
                        reply_markup=markups.user_ready
                    )
                    ctx.user_table_msgs[pid] = msg.message_id
            else:
                msg = bot.send_message(
                    chat_id=int(participant),
                    text=texts.show_users_current_table_num(table_num=table, round_num=round_num),
                    reply_markup=markups.user_ready
                )
                ctx.user_table_msgs[pid] = msg.message_id
        ctx.ready_users = set()
        msg = bot.send_message(
            message.chat.id,
            f"–ì–æ—Ç–æ–≤—ã: 0 –∏–∑ {len(ctx.users)}",
            reply_markup=None
        )
        ctx.ready_counter_msg_id = msg.message_id
        bot.send_message(message.chat.id, ctx.scheduler.get_session_stats(), reply_markup=markups.admin_main)
        ctx.last_users = ctx.users.copy()
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•':
        bot.send_message(
            message.chat.id,
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}",
            reply_markup=markups.admin_main
        )
    elif message.text == '–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üí°':
        bot.send_message(
            message.chat.id,
            f"–ò–¥–µ–∞–ª—å–Ω–æ: {tables} —Å—Ç–æ–ª(–∞/–æ–≤) –ø–æ {seats} –º–µ—Å—Ç\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–∞—Ä: {rounds}",
            reply_markup=markups.admin_main
        )
    elif message.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é üõë':
        ctx.session_started = False
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        all_participants = ctx.users.copy()
        ctx.users.clear()
        ctx.last_users.clear()
        ctx.ready_users = set()
        ctx.user_table_msgs = {}
        ctx.scheduler = session.SessionScheduler([], 1, 1)
        
        # –û—á–∏—â–∞–µ–º –¥–∞—à–±–æ—Ä–¥ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        ctx.app_service.clear_dashboard()
        
        bot.send_message(message.chat.id, '–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.', reply_markup=markups.admin_main)
        # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for user_id in all_participants:
            try:
                bot.send_message(chat_id=int(user_id), text='–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!')
            except Exception:
                pass

@bot.message_handler()
def handle_message(message: types.Message):
    ctx = bot.context
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
    if ctx.state == State.waiting_for_name.value and hasattr(ctx, 'pending_user_id') and message.chat.id == ctx.pending_user_id:
        fio = message.text.strip()
        if len(fio.split()) < 2:
            bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        ctx.pending_user_fio = fio
        ctx.state = State.default.value
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –≤ ctx.usernames —á–µ—Ä–µ–∑ models.UserInfo, table=0
        ctx.usernames[str(message.chat.id)] = models.UserInfo(fio, 0)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω—á–∞—Ç —Å –§–ò–û
        bot.send_message(
            chat_id=ctx.admin_chat_id,
            text=texts.admin_chat_new_request(fio),
            reply_markup=markups.request_actions(message.chat.id)
        )
        bot.send_message(
            chat_id=message.chat.id,
            text=texts.registration_request_sent
        )
        del ctx.pending_user_id
        del ctx.pending_user_fio
        return
    if message.chat.id == bot.context.admin_chat_id and message.text in [
        '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è',
        '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚úèÔ∏è',
        '–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é üö¶',
        '–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ ‚è≠Ô∏è',
        '–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë•',
        '–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üí°'
    ]:
        return
    match(ctx.state):
        case State.change_tables_count.value:
            try:
                ctx.settings.tables_count = int(message.text)
            except (TypeError, ValueError):
                bot.send_message(chat_id=message.chat.id, text=texts.invalid_num_value)
                return
            bot.send_message(chat_id=message.chat.id, text=texts.change_seats_count)
            ctx.state = State.change_seats_count.value
        case State.change_seats_count.value:
            try:
                ctx.settings.seats_count = int(message.text)
            except (TypeError, ValueError):
                bot.send_message(chat_id=message.chat.id, text=texts.invalid_num_value)
                return
            bot.send_message(chat_id=message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
            ctx.state = State.change_round_time.value
        case State.change_round_time.value:
            try:
                ctx.settings.round_time = int(message.text)
            except (TypeError, ValueError):
                bot.send_message(chat_id=message.chat.id, text=texts.invalid_num_value)
                return
            bot.send_message(
                chat_id=message.chat.id,
                text=texts.current_settings(ctx.settings) + f"\n–í—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞: {ctx.settings.round_time} –º–∏–Ω.",
                reply_markup=markups.admin_main
            )
            ctx.state = State.default.value

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(callback: types.CallbackQuery):
    ctx : AppContext = bot.context
    data = callback.data.split(':')[0]
    # --- Admin UI buttons ---
    if callback.message.chat.id == ctx.admin_chat_id:
        if data == 'ADMIN_SHOWSETTINGS':
            bot.answer_callback_query(callback.id)
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=texts.current_settings(settings=ctx.settings),
                reply_markup=markups.admin_main
            )
            return
        elif data == 'ADMIN_CHANGESETTINGS':
            bot.answer_callback_query(callback.id)
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=texts.change_tables_count,
                reply_markup=None
            )
            ctx.state = State.change_tables_count.value
            return
        elif data == 'ADMIN_STARTSESSION':
            bot.answer_callback_query(callback.id)
            ctx.scheduler = session.SessionScheduler(
                participants=ctx.users,
                n=ctx.settings.tables_count,
                m=ctx.settings.seats_count
            )
            round_dict = ctx.scheduler.generate_next_round()
            if round_dict is None:
                bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.id,
                    text=texts.unable_to_start_session,
                    reply_markup=markups.admin_main
                )
                return
            for participant, table in round_dict.items():
                if int(participant) > 100:
                    bot.send_message(
                        chat_id=int(participant),
                        text=texts.show_users_current_table_num(table_num=table),
                        reply_markup=markups.user_ready
                    )
            stats = ctx.scheduler.get_session_stats()

            ctx.last_users = ctx.users.copy()
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=stats,
                reply_markup=markups.admin_main
            )
            return
        elif data == 'ADMIN_NEXTRND':
            bot.answer_callback_query(callback.id)
            round_dict = ctx.scheduler.generate_next_round()
            if round_dict is None:
                bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.id,
                    text=texts.unable_to_start_session,
                    reply_markup=markups.admin_main
                )
                return
            for participant, table in round_dict.items():
                if int(participant) > 100:
                    bot.send_message(
                        chat_id=int(participant),
                        text=texts.show_users_current_table_num(table_num=table),
                        reply_markup=markups.user_ready
                    )
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=ctx.scheduler.get_session_stats(),
                reply_markup=markups.admin_main
            )
            ctx.last_users = ctx.users.copy()
            return
        elif data == 'ADMIN_ADDPARTICIPANT':
            bot.answer_callback_query(callback.id)
            ctx.users.append(str(ctx.bots_count))
            ctx.bots_count += 1
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=f"–£—á–∞—Å—Ç–Ω–∏–∫ {ctx.users[-1]} –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=markups.admin_main
            )
            return
        elif data == 'ADMIN_REMOVEPARTICIPANT':
            bot.answer_callback_query(callback.id)
            if ctx.users:
                removed_user = ctx.users.pop()
                ctx.scheduler.remove_participant(removed_user)
                bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.id,
                    text=f"–£—á–∞—Å—Ç–Ω–∏–∫ {removed_user} —É–¥–∞–ª–µ–Ω",
                    reply_markup=markups.admin_main
                )
            else:
                bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.id,
                    text="–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    reply_markup=markups.admin_main
                )
            return
        elif data == 'ADMIN_SHOWPARTICIPANTS':
            bot.answer_callback_query(callback.id)
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(ctx.users)}",
                reply_markup=markups.admin_main
            )
            return
        elif data == 'ADMIN_ROUND_START':
            bot.answer_callback_query(callback.id)
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text='–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!',
                reply_markup=None
            )

            request_body = dict()
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            for participant in ctx.users:

                pid = str(participant)
                if hasattr(ctx, 'user_table_msgs') and pid in ctx.user_table_msgs:
                    try:
                        bot.edit_message_text(
                            chat_id=int(participant),
                            message_id=ctx.user_table_msgs[pid],
                            text='–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!'
                        )
                    except Exception:
                        msg = bot.send_message(
                            chat_id=int(participant),
                            text='–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!'
                        )
                        ctx.user_table_msgs[pid] = msg.message_id
                else:
                    msg = bot.send_message(
                        chat_id=int(participant),
                        text='–†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!'
                    )
                    ctx.user_table_msgs[pid] = msg.message_id
            stats = ctx.scheduler.get_session_stats()
            ctx.last_users = ctx.users.copy()
            ctx.session_started = True  # –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç'
            bot.send_message(callback.message.chat.id, stats, reply_markup=markups.admin_main)

            ctx.app_service.update_users(ctx.usernames)

            return
    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ---
    match(data):
        case markups.CallbackTypes.register.value:
            # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
            ctx.state = State.waiting_for_name.value
            ctx.pending_user_id = callback.message.chat.id
            bot.send_message(
                chat_id=callback.message.chat.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
            )
        case markups.CallbackTypes.leave_session.value:
            if str(callback.message.chat.id) in ctx.users:
                ctx.users.remove(str(callback.message.chat.id))
                ctx.usernames.pop(callback.message.chat.id)
            try:
                ctx.scheduler.remove_participant(str(callback.message.chat.id))
            except ValueError:
                pass
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            deleted = False
            try:
                bot.delete_message(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.id
                )
                deleted = True
            except Exception as e:
                print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ
            bot.send_message(
                chat_id=callback.message.chat.id,
                text='–í—ã –≤—ã—à–ª–∏',
                reply_markup=markups.register_markup
            )

            bot.send_message(
                chat_id=ctx.admin_chat_id,
                text=texts.user_left_session_log(callback.message.chat.first_name)
            )
        case markups.CallbackTypes.accept_new_user.value:
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=texts.user_accepted_log(callback.message.text),
            )
            id = callback.data.split(':')[1]
            ctx.users.append(id)

            # –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
            if ctx.session_started:
                bot.send_message(
                    chat_id=id,
                    text='–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.'
                )
                bot.send_message(
                    chat_id=ctx.admin_chat_id,
                    text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏ –±—É–¥–µ—Ç –≤–∫–ª—é—á—ë–Ω –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.'
                )
            else:
                bot.send_message(
                    chat_id=id,
                    text=texts.user_is_happy,
                    reply_markup=markups.leave_session
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                with open('cat-hyppy.mp4', 'rb') as gif_file:
                    bot.send_animation(chat_id=id, animation=gif_file)
            
            return

        case markups.CallbackTypes.deny_new_user.value:
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=texts.user_declined_log(callback.message.text),
            )
            id = callback.data.split(':')[1]
            bot.send_message(
                chat_id=id,
                text=texts.registration_denied,
            )

        case markups.CallbackTypes.user_ready.value:
            bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.id,
                text=callback.message.text,
                reply_markup=None
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—ã
            if not hasattr(ctx, 'ready_users'):
                ctx.ready_users = set()
            ctx.ready_users.add(str(callback.message.chat.id))
            ready_count = len(ctx.ready_users)
            total_count = len(ctx.users)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—Å—á–µ—Ç—á–∏–∫
            if hasattr(ctx, 'ready_counter_msg_id'):
                try:
                    bot.edit_message_text(
                        chat_id=ctx.admin_chat_id,
                        message_id=ctx.ready_counter_msg_id,
                        text=f"–ì–æ—Ç–æ–≤—ã: {ready_count} –∏–∑ {total_count}"
                    )
                except Exception:
                    pass
            if set(ctx.users) == ctx.ready_users:
                if not ctx.session_started:
                    bot.send_message(
                        chat_id=ctx.admin_chat_id,
                        text='–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—ã! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞—É–Ω–¥.',
                        reply_markup=markups.start_session_inline
                    )
                else:
                    bot.send_message(
                        chat_id=ctx.admin_chat_id,
                        text='–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥–æ—Ç–æ–≤—ã! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.'
                    )

bot.infinity_polling()